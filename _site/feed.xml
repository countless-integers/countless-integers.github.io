<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>countless-integers blog</title>
    <description>My random thoughts and weird stories inspired by dailly coding.  This blog runs on the awesome Jekyl.
</description>
    <link>http://countless-integers.github.io/</link>
    <atom:link href="http://countless-integers.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 28 Mar 2020 22:04:04 +0100</pubDate>
    <lastBuildDate>Sat, 28 Mar 2020 22:04:04 +0100</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>Substituting AWS S3 with a local service</title>
        <description>&lt;p&gt;S3 is rather cheap and you might wander why bother, but there are multiple good reasons to use a local substitute during development. Among them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;working offline, e.g. on a plane&lt;/li&gt;
  &lt;li&gt;marginally lower latency&lt;/li&gt;
  &lt;li&gt;no risk of bucket name collisions, especially when you create them like crazy during tests&lt;/li&gt;
  &lt;li&gt;no fuss with credentials&lt;/li&gt;
  &lt;li&gt;tear it apart all you want&lt;/li&gt;
  &lt;li&gt;check those pesky edge cases with connectivity errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For context, I’ll mention upfront that this solution was tested on a PHP project written in Laravel, but should be equally applicable for any other technology.&lt;/p&gt;

&lt;h2 id=&quot;whats-available&quot;&gt;What’s available&lt;/h2&gt;

&lt;p&gt;Some solutions we’ve tried out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://min.io/&quot;&gt;MinIO&lt;/a&gt; – a storage service in its own right, but maintaining a (mostly) S3-compatible API. Has its own set of tools and a GUI.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adobe/S3Mock&quot;&gt;S3Mock from Adobe&lt;/a&gt; – focused on API compatibility, no frills. Written in Java.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jubos/fake-s3&quot;&gt;Fake S3&lt;/a&gt; – similar to S3Mock (it’s even referenced in their GH page). Written in Ruby.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;Out of those, we’ve ended up using MinIO. It was mostly because of convenience as we were already using &lt;a href=&quot;https://laravel.com/docs/master/homestead&quot;&gt;Homestead&lt;/a&gt; Vagrant box for development and it came as an installation option with it. It was also important for me to have some tools to inspect all buckets during manual tests and since none of those solutions worked correctly with AWS Cli tool for me, MinIO came through with its GUI and Cli tool (somewhat confusingly called &lt;code class=&quot;highlighter-rouge&quot;&gt;mc&lt;/code&gt; aka &lt;em&gt;Not Midnight Commander&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Not to say that, e.g. S3Mock, was difficult to set up. My collegue came up with the painless solution of using the &lt;a href=&quot;https://www.vagrantup.com/docs/provisioning/docker.html&quot;&gt;docker provisioner&lt;/a&gt; in Vagrant. A snippet you can use in your &lt;code class=&quot;highlighter-rouge&quot;&gt;Vagrantfile&lt;/code&gt; (in our case it meant modifying Homestead’s Vagrantfile):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ...
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.vm.provision &quot;docker&quot; do |d|
        d.pull_images &quot;adobe/s3mock&quot;
        d.run &quot;adobe/s3mock&quot;,
          args: &quot;-p 9090:9090 -p 9191:9191&quot;
    end
    # ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, to get MinIO in Homestead, all you have to do is enable it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Homestead.yaml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;features:
	- minio: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In versions 5.7+ you can also pre-define buckets and their policies that should be provisioned for you in a separate, &lt;code class=&quot;highlighter-rouge&quot;&gt;buckets&lt;/code&gt; section. Beware that you can add that configurations in previous versions without triggering any errors, but it will just be ignored.&lt;/p&gt;

&lt;p&gt;Credentials will also need to be updated. MinIO that bundles with Homestead uses a dummy login and password, but unlike the S3Mock (at least by default), it actually checks them, so update your configuration accordingly.&lt;/p&gt;

&lt;p&gt;Last thing to do is to do is to update local configuration to use thus provisioned service. Depending on whether you use Flysystem, Laravel’s Filesystem or AWS SDK directly, this step might look differently for you. The important part is that with a local service you’ll need to use something called “path style endpoint” for AWS API. Laravel’s documentation gives an &lt;a href=&quot;https://laravel.com/docs/5.7/homestead#configuring-minio&quot;&gt;example for the Filesystem configuration&lt;/a&gt;. The crux of the matter is that because the service is local, buckets url’s will no longer be conveniently generated for you by AWS. The way around that, bar some local DNS configuration, is to use a static domain and put the bucket name in the path of the url.&lt;/p&gt;

&lt;p&gt;Apart from that, it’s business as usual. All the logic written for the actual S3 should work with your local substitute.&lt;/p&gt;

&lt;h2 id=&quot;downsides&quot;&gt;Downsides&lt;/h2&gt;

&lt;p&gt;Not everything is rosy though. All of the services strive to keep their API S3 compatible, but your mileage will vary depending on how many features of S3 you actually rely on.&lt;/p&gt;

&lt;p&gt;Examples I’ve encountered include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;needing to change from &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; policy to &lt;code class=&quot;highlighter-rouge&quot;&gt;download&lt;/code&gt; to achieve a result similar to AWS’s own “public objects”. Somewhat frustratingly, I could not find a clear explanation of policy differences in MinIO docs. I still feel like I was missing some key piece of information to set it up better, but it didn’t help that at the time there was no one centralised information source on available polices. Therefore I’d suggest to check if features like hosted websites, complex ACL setups, CORS policies or object life-cycles will be sufficiently supported for your needs.&lt;/li&gt;
  &lt;li&gt;some of the aws cli commands just would not work. Most frustratingly &lt;code class=&quot;highlighter-rouge&quot;&gt;s3 ls&lt;/code&gt; with an endpoint url defined would just throw an error. Same story with third party browsers like Dragon Disk (tried that and some others just for due diligence, didn’t like any of them)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;All the solutions performed well enough to warrant a recommendation (see the caveats above though). Using a local replacement for S3 makes development feel a bit safer and makes testing less stressful. If you’re considering it, just give it a try and see if it’s an (almost) drop-in replacement or not.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Mar 2020 00:00:00 +0100</pubDate>
        <link>http://countless-integers.github.io/aws/laravel/2020/03/28/substituting-aws-s3-with-a-local-service.html</link>
        <guid isPermaLink="true">http://countless-integers.github.io/aws/laravel/2020/03/28/substituting-aws-s3-with-a-local-service.html</guid>
        
        
        <category>aws</category>
        
        <category>laravel</category>
        
      </item>
    
      <item>
        <title>Weekly article round-up, 3rd week of June</title>
        <description>&lt;p&gt;Interesting stuff I read/watched on the web this week.&lt;/p&gt;

&lt;h2 id=&quot;on-fitness-and-programming&quot;&gt;On fitness and programming:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/better-programming/how-fitness-transformed-me-into-a-better-web-developer-ac51a2b08cb4&quot;&gt;How Fitness Transformed Me into a Better Web Developer&lt;/a&gt; by &lt;a href=&quot;https://medium.com/@lumrachele&quot;&gt;Rachel Lum&lt;/a&gt;. The conclusion is pretty obvious to me as I’ve went through a similar journey as the author. What makes this article stand-out however are the references to white-papers and other sources used to support the main idea of the piece – regular exercise improves your productivity, physical and &lt;em&gt;mental&lt;/em&gt; health.&lt;/p&gt;

&lt;p&gt;Short, ca. 5 min read.&lt;/p&gt;

&lt;h2 id=&quot;on-benefits-of-using-object-data-structures-over-associative-arrays-in-php&quot;&gt;On benefits of using object data structures over associative arrays in PHP&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://steemit.com/php/@crell/php-use-associative-arrays-basically-never&quot;&gt;PHP: Use associative arrays basically never&lt;/a&gt; by &lt;a href=&quot;https://steemit.com/@crell&quot;&gt;Crell?&lt;/a&gt;. Some strong opinions (starting from the title), some backed by evidence presented in the article. Authors shows some use-cases for using different types of data structures for list/dictionary type data and backs it up with some basic benchmark results. Overall good write-up even if you’ll just go for the conclusion (although I highly recommend going through the comments section as well).&lt;/p&gt;

&lt;p&gt;Medium, ca. 8 min read.&lt;/p&gt;

&lt;h2 id=&quot;talk-about-burn-out&quot;&gt;Talk about burn-out&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/JQ1-SBEdV5s&quot;&gt;Post-burnout Thoughts&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/joel__lord&quot;&gt;Joel Lord&lt;/a&gt;. Joel’s talk recorded at Dutch PHP Conference on 7th of June 2019 about burn-out and his experience with it. It’s a bit awkward and cringy, but it’s important to keep in mind that the speaker went through the stuff his talking about. He covers the symptoms, effects and gives useful tips on how to deal with it.&lt;/p&gt;

&lt;p&gt;Some references from the video:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mhfa.nl/online-cursus-mentale-gezondheid&quot;&gt;Mental Health First Aid Kit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leanpub.com/osmi-mental-wellness-in-the-workplace&quot;&gt;Mental Wellness in the Workplace&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://letstalk.bell.ca/en/toolkit&quot;&gt;The Bell Let’s Talk Toolkit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://podcasts.google.com/?feed=aHR0cDovL2hleXlvdS5saWJzeW4uY29tL2dwbQ&amp;amp;episode=MTliZDA4ZjJjYmY5NDY2NzkwYjYzZjkyN2Q3YmUwNWE&quot;&gt;Hey You!, Episode 8 - Mental Health Awareness&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Medium, 32 min watch.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Jun 2019 00:00:00 +0200</pubDate>
        <link>http://countless-integers.github.io/roundup/2019/06/23/weekly-article-round-up-3rd-week-of-june.html</link>
        <guid isPermaLink="true">http://countless-integers.github.io/roundup/2019/06/23/weekly-article-round-up-3rd-week-of-june.html</guid>
        
        
        <category>roundup</category>
        
      </item>
    
      <item>
        <title>Controlling date and time in Go and Python for PHP devs</title>
        <description>&lt;h2 id=&quot;changing-datetime-formats-or-transforming-strings-into-date-objects&quot;&gt;Changing datetime formats or transforming strings into date objects&lt;/h2&gt;

&lt;p&gt;Main use cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dealing with user input in different formats&lt;/li&gt;
  &lt;li&gt;re-formatting date time without having to know the exact input format&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;php&quot;&gt;PHP&lt;/h3&gt;

&lt;p&gt;It’s as easy as:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;strtotime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// or, even better:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DateTimeImmutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First one returns a timestamp, second is &lt;a href=&quot;https://www.php.net/manual/en/class.datetimeimmutable.php&quot;&gt;an object&lt;/a&gt; with quite a lot of functionality built-in. The object is not perfect
(in fact it’s PHP-s second attempt at it, first one being a mutable &lt;a href=&quot;https://www.php.net/manual/en/class.datetime&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt;&lt;/a&gt;), especially when you start
using &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; functions i.e. on datetime objects from different time zones. In fact not being explicit about timezones
was the most common source of head-aches for me in the past (by default server tz will be adopted), so
beware.&lt;/p&gt;

&lt;p&gt;One of the interesting features is the ability to parse “natural” language date time strings like “next year”, “+2 hours”. I found that quite useful in the past for making cli interfaces a lot more user-friendly.&lt;a href=&quot;https://www.php.net/manual/en/datetime.formats.php&quot;&gt;Reference for supported datetime formats&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;python&quot;&gt;Python&lt;/h3&gt;

&lt;p&gt;Date format recognition magic does not come out-of-the-box. There is &lt;a href=&quot;https://docs.python.org/3.7/library/datetime.html#datetime.datetime.strptime&quot;&gt;a structured date parser&lt;/a&gt; though:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strptime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'2077'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However it will raise errors if the string cannot be parsed. &lt;a href=&quot;https://docs.python.org/3.7/library/datetime.html#strftime-strptime-behavior&quot;&gt;Reference of date format options&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anyway, since batteries were not included this time, to the pip-mobile! &lt;a href=&quot;https://dateutil.readthedocs.io/en/stable/index.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dateutil&lt;/code&gt;&lt;/a&gt; to the rescue. It does
have a function lets us get the same behaviour as PHP:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dateutil.parser&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'2011'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'9AM'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately it’s not capable of parsing strings like ‘tomorrow’ as PHP date functions can. Also good luck figuring out
what happens when you do &lt;code class=&quot;highlighter-rouge&quot;&gt;parse('2')&lt;/code&gt;, because it’s not going to be an error…&lt;/p&gt;

&lt;h3 id=&quot;go&quot;&gt;Go&lt;/h3&gt;

&lt;p&gt;Similar to Python, golang comes equipped with structured time parsing functions. However its time format definitions are somewhat confusing, yet
convenient to use:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formatExample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2006-Jan-02&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formatExample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2077-Feb-22&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, that is a bit of a double-edged sword as messing up the format, which is very easy i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;2000-Jan-01&lt;/code&gt;, will leave you with a
null date of &lt;code class=&quot;highlighter-rouge&quot;&gt;0001-01-01 00:00:00 +0000 UTC&lt;/code&gt;. So on one hand it makes the format string value more self-documenting, on
the other it can an arrow to your knee. More about time formats
[here][https://golang.org/pkg/time/#example_Time_Format].&lt;/p&gt;

&lt;p&gt;As for a module that would resemble the behaviour and features of PHP functions – I haven’t found one yet. TBC&lt;/p&gt;

&lt;h2 id=&quot;calculating-time-differences-between-dates-and-time&quot;&gt;Calculating time differences between dates and time&lt;/h2&gt;

&lt;p&gt;Main use cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;getting the absolute difference between datetimes i.e.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;php-1&quot;&gt;PHP&lt;/h3&gt;

&lt;p&gt;TBC&lt;/p&gt;

&lt;h3 id=&quot;python-1&quot;&gt;Python&lt;/h3&gt;

&lt;p&gt;TBC&lt;/p&gt;

&lt;h3 id=&quot;go-1&quot;&gt;Go&lt;/h3&gt;

&lt;p&gt;TBC&lt;/p&gt;
</description>
        <pubDate>Wed, 01 May 2019 00:00:00 +0200</pubDate>
        <link>http://countless-integers.github.io/php/python/go/comparison/2019/05/01/controlling-date-and-time-in-go-and-python-for-php-devs.html</link>
        <guid isPermaLink="true">http://countless-integers.github.io/php/python/go/comparison/2019/05/01/controlling-date-and-time-in-go-and-python-for-php-devs.html</guid>
        
        
        <category>php</category>
        
        <category>python</category>
        
        <category>go</category>
        
        <category>comparison</category>
        
      </item>
    
      <item>
        <title>Installing ArchLinux as a VirtualBox guest system</title>
        <description>&lt;h1 id=&quot;installing-archlinux-on-a-virtualbox-machine&quot;&gt;Installing ArchLinux on a VirtualBox Machine&lt;/h1&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;p&gt;You will need about 20-30 minutes of your precious time to follow through will all of this. That assumes everything will go smoothly (why wouldn’t it?).&lt;/p&gt;

&lt;p&gt;First things first – obtain the Arch Linux installation media in form of an ISO volume from https://www.archlinux.org/download/.&lt;/p&gt;

&lt;p&gt;Assuming you have VirtualBox already installed, create a new VM. ArchLinux is one of the recognized machine types in the VM creator form, so use it. Allocate some of your host machine resources to the machine, adjust accordingly to your rig’s capabilities.&lt;/p&gt;

&lt;p&gt;One thing I’m going to do, that might not be strictly necessary is to enable EFI under “System” settings (this is related to bootloader configuration described later in this article):&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/img/enable-eif-in-vbox.png&quot; alt=&quot;Enable EFI in VirtualBox settings panel&quot; /&gt;
  &lt;figcaption&gt;Enable EFI in VirtualBox settings panel&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;One last this to remember – if you enable input capturing inside VirtualBox window, remember you host key. On Windows it’ll be the right “Ctrl” key, on MacOs the right “Cmd”. Another useful thing: “Ctrl+Home” will open Vbox machine pop-up allowing you to do things like reboot and ejecting virtual devices (e.g. ArchLinux installation ISO image).&lt;/p&gt;

&lt;p&gt;Now it’s time to follow &lt;a href=&quot;https://wiki.archlinux.org/index.php/Installation_guide&quot;&gt;ArchLinux installation guide&lt;/a&gt; to the letter.&lt;/p&gt;

&lt;h2 id=&quot;partitioning&quot;&gt;Partitioning&lt;/h2&gt;
&lt;p&gt;I’ve went with a dynamically allocated 8gb storage volume for my virtual hard drive. I’ve also decided to go with GPT/EFI partitions.&lt;/p&gt;

&lt;p&gt;According to most of the guides I could find, the suggested layout would look as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/boot&lt;/code&gt; partition, 512 MiB in size at the begging&lt;/li&gt;
  &lt;li&gt;swap partition, min. 512 MiB in size&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; partition using the remainder of the drive&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To make this happen we can use a multitude of tools: &lt;code class=&quot;highlighter-rouge&quot;&gt;gdisk&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fdisk&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cfdisk&lt;/code&gt;. Here is an example using &lt;code class=&quot;highlighter-rouge&quot;&gt;gdisk&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# gdisk /dev/sda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/img/gdisk-partition-scan.png&quot; alt=&quot;Partition set-up in gdisk&quot; /&gt;
  &lt;figcaption&gt;Partition set-up in gdisk&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Running that will start a partition scan to assess the current state of drive’s partitioning.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/img/gpt-partitioning.png&quot; alt=&quot;Partition set-up in gdisk&quot; /&gt;
  &lt;figcaption&gt;Partition set-up in gdisk&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;If you went through some trial and error when creating partitions, &lt;code class=&quot;highlighter-rouge&quot;&gt;gdisk&lt;/code&gt; will kindly suggest to reboot (something &lt;code class=&quot;highlighter-rouge&quot;&gt;cfdisk&lt;/code&gt; failed to do for me). Do so if necessary. In the end you should end up with:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/img/ls-of-devs.png&quot; alt=&quot;List of storage devices&quot; /&gt;
  &lt;figcaption&gt;List of storage devices&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;formatting&quot;&gt;Formatting&lt;/h2&gt;
&lt;p&gt;Assuming the layout created above:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkfs.fat -F32 /dev/sda1
mkswap /dev/sda2
mkfs.ext4 /dev/sda3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;mount-the-partitions&quot;&gt;Mount the partitions&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# mount /dev/sda3 /mnt
# mkdir /mnt/boot
# mount /dev/sda1 /mnt/boot
# swapon /dev/sda2 # this should not be necessary because of genfstab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;boostrap-root-partition&quot;&gt;Boostrap root partition&lt;/h2&gt;
&lt;p&gt;Time to install the basics:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pacstrap /mnt base
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will install the basic set of packages required to log in to the system.&lt;/p&gt;

&lt;p&gt;To inform the newly bootstrap system of all the partitions we’re going to use and have them mounted on boot:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# genfstab -U /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;fstab&lt;/code&gt; file, referencing drives by their UUID (as an alternative to referencing them by their labels).&lt;/p&gt;

&lt;h2 id=&quot;logging-in&quot;&gt;Logging-in&lt;/h2&gt;
&lt;p&gt;Now we can finally log in to the system with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# arch-chroot /mnt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, technically changing root is not the same as logging in, more like, well changing root directory to a specified folder…&lt;/p&gt;

&lt;h2 id=&quot;basic-configuration&quot;&gt;Basic configuration&lt;/h2&gt;

&lt;p&gt;Time and localization options:&lt;/p&gt;

&lt;p&gt;Uncomment &lt;code class=&quot;highlighter-rouge&quot;&gt;en_US.UTF-8 UTF-8&lt;/code&gt; and others needed in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/locale.gen&lt;/code&gt; and run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# locale-gen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# echo &quot;LANG=en_US.UTF-8&quot; &amp;gt; /etc/locale.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Time:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ln -sf /usr/share/zoneinfo/Europe/&amp;lt;City&amp;gt; /etc/localtime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Set hostname:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# echo vbox &amp;gt; /etc/hostname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve used vbox, but you can use whatever. But whatever you use, remember it for this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# echo -e &quot;\n127.0.1.1\tvbox.localdomain\tvbox&quot; &amp;gt;&amp;gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt; flag will make &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; interpret escape character like &lt;code class=&quot;highlighter-rouge&quot;&gt;\t&lt;/code&gt; and help to keep &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hostnames&lt;/code&gt; file consistently formatted.&lt;/p&gt;

&lt;p&gt;Networking:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# systemctl enable dhcpcd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;for a wired connection. It’s possible to set-up wireless, but I’ll not cover this, because for a VBox install it does not seem practical.&lt;/p&gt;

&lt;p&gt;XOrg and ALSA for audio-video capabilities:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pacman -S xf86-video-intel xf86-video-fbdev xorg-server xorg-xinit xorg-twm xterm alsa-utils pulseaudio pulseaudio-alsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;VirtualBox guest additions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pacman -S virtualbox-guest-utils virtualbox-guest-modules-arch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will allows us to change screen resolution and a couple of other useful things. &lt;a href=&quot;https://wiki.archlinux.org/index.php/VirtualBox#Installation_steps_for_Arch_Linux_guests&quot;&gt;More about guest additions and what can they do.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A window manager (I chose XFCE4 as a compromise between nice to use and light on resources):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pacman -S xfce4 xfce4-goodies # the latter is optional
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Various stuff you might need:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pacman -S vim zsh rsync firefox sudo python python-pip nodejs git openssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Set up password for the root user (interactive command):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add a non-root user:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# useradd -m -g users -G adm,lp,wheel,power,audio,video -s /bin/zsh me
# passwd me
# EDITOR=vim visudo  # uncomment %wheel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where “me” is you (or whatever login you want to use). &lt;code class=&quot;highlighter-rouge&quot;&gt;wheel&lt;/code&gt; is a sudoers group, why it’s called like that, I do not know.&lt;/p&gt;

&lt;p&gt;That should be enough to get started. So now:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exit
umount /mnt -R # -R because of /boot partition mounted in /mnt/boot
reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;installing-the-bootloader&quot;&gt;Installing the bootloader&lt;/h2&gt;
&lt;p&gt;Arch guide lists this step near the end, but I decided to make it the first one, since this has been the most troublesome and confusing. Back in the day you would just install to MBR and things would be dandy:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pacman -S grub
# grub-install /dev/sda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However this new madness of (U)EFI firmware came about and now it’s more like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pacman -S grub efibootmgr
# grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which should output something like this at the end:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Installation finished. No errors reported.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we can generate GRUB’s config file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If that goes well, we’re set.&lt;/p&gt;

&lt;h2 id=&quot;first-actual-log-in&quot;&gt;First actual log-in&lt;/h2&gt;
&lt;p&gt;I’d recommend to login as the non-root users we created to test if that works correctly. If yes I’d also suggest to run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# sudo pacman -Syu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Set-up time synchronisation service:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# timedatectl set-ntp true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to test that &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; was configured properly and update the system at the same time.&lt;/p&gt;

&lt;p&gt;Pacman is the official package manager and it is great. However there is tons of non-official packages for you to explore. One of the ways to get to them is to install &lt;code class=&quot;highlighter-rouge&quot;&gt;yaourt&lt;/code&gt;. There are others, but I have been using that one for a while and so far it gave me little issues. If you want it start with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pacman -S base-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to install extra base packages necessary to make and install pacman packages from scratch (among other things). Then follow the &lt;a href=&quot;https://archlinux.fr/yaourt-en&quot;&gt;instructions&lt;/a&gt; on the &lt;code class=&quot;highlighter-rouge&quot;&gt;yaourt&lt;/code&gt; homepage (as a non-root user):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# git clone https://aur.archlinux.org/package-query.git
# cd package-query
# makepkg -si
# cd ..
# git clone https://aur.archlinux.org/yaourt.git
# cd yaourt
# makepkg -si
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will install &lt;code class=&quot;highlighter-rouge&quot;&gt;yaourt&lt;/code&gt; and its dependency &lt;code class=&quot;highlighter-rouge&quot;&gt;package-query&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Afterwards, we can try the window manager:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# startxfce4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If that fails (I keep forgetting why…), you might need to install a &lt;a href=&quot;https://wiki.archlinux.org/index.php/Display_manager&quot;&gt;display manager&lt;/a&gt;. E.g. to install &lt;a href=&quot;https://wiki.archlinux.org/index.php/LightDM&quot;&gt;LightDM&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pacman -S lightdm lightdm-gtk-greeter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# sudo lightdm 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;you can also make it start on-boot using systemd service:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# systemctl enable lightdm.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;prosper&quot;&gt;Prosper&lt;/h2&gt;
&lt;p&gt;All is now set, ready to use and further customizations. Enjoy!&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/img/xfce-4.png&quot; alt=&quot;End result -- XFCE 4 running at ArchLinux guest VirtualBox installation&quot; /&gt;
  &lt;figcaption&gt;End result -- XFCE 4 running at ArchLinux guest VirtualBox installation&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;extra-references&quot;&gt;Extra references&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/288865/file-system-boot-is-not-a-fat-efi-system-partition-esp-file-system?answertab=active#tab-top&quot;&gt;StackXxchange :: Preparing /boot partition for EFI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/midfingr/youtube_notes/master/arch_way&quot;&gt;Github :: A bit outdated, but still useful installation cheatsheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Installation_guide&quot;&gt;Arch Wiki :: Installation Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/GRUB/EFI_examples&quot;&gt;Arch Wiki :: EFI examples for GRUB configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/GRUB#Check_if_you_have_GPT_and_an_ESPo&quot;&gt;Arch Wiki :: Checking if GPT can be used&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/VirtualBox#Installation_steps_for_Arch_Linux_guests&quot;&gt;Arch Wiki :: Installation steps for Arch Linux as VirtualBox guest machine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Xorg#Installation&quot;&gt;Arch Wiki :: XOrg installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/partitioning#GUID_Partition_Table&quot;&gt;Arch Wiki :: GUID and partition tables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Systemd-timesyncd&quot;&gt;Arch Wiki :: Timesync Systemd service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://averagelinuxuser.com/xfce-look-modern-and-beautiful/&quot;&gt;AverageLinuxUser :: Making XFCE4 prettier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0200</pubDate>
        <link>http://countless-integers.github.io/linux/2017/09/10/installing-archlinux-as-a-virtualbox-guest-system.html</link>
        <guid isPermaLink="true">http://countless-integers.github.io/linux/2017/09/10/installing-archlinux-as-a-virtualbox-guest-system.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>The Linux terminal experience on Windows 10</title>
        <description>&lt;p&gt;After the news about Microsoft including some sort of Ubuntu-base Linux console in Windows 10 anniversary update broke out I was a bit skeptical. No about the idea itself, that makes perfect sense and should have been done a long time ago, but about the implementation. After all both systems are vastly different, e.g. in terms of file systems and access to them (even minor stuff, like the path separator, is different). However with some virtualization and throwing enough money at the problem it did seem possible to pull-off.&lt;/p&gt;

&lt;h1 id=&quot;how-to-enable-it&quot;&gt;How to enable it?&lt;/h1&gt;
&lt;p&gt;Of course it is not enabled by default, there is plenty of tutorials on the subject. I went with &lt;a href=&quot;http://www.omgubuntu.co.uk/2016/08/enable-bash-windows-10-anniversary-update&quot;&gt;OMG Ubuntu one&lt;/a&gt;. It went quite smoothly.&lt;/p&gt;

&lt;p&gt;First thing I have noticed though is how ugly this looks. Looking at terminal fonts all day makes some people develop a certain fetish for console looks. Seems like I am among those weirdos as well. In comes &lt;a href=&quot;http://cmder.net/&quot;&gt;cmder&lt;/a&gt;, an open-source terminal emulator. This one looks acceptable, gorgeous compared to the one offered on Windows by default. It also has some nifty features, which I will not mention here. Ah, and it also takes a while to install…&lt;/p&gt;

&lt;p&gt;Having those two in place we can run the bash console from cmder like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(see “Problems?” section before you do though)&lt;/p&gt;

&lt;h1 id=&quot;what-can-it-do&quot;&gt;What can it do?&lt;/h1&gt;
&lt;p&gt;A great many things, I have been told. From a developer perspective: it should give us access to tools we take for granted (like &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt;), run web-servers and generally pretend we are running a Linux server.&lt;/p&gt;

&lt;p&gt;To put it to test, I have tried to set-up a dev environment for this blog. Simple, yet it appears to require ruby2+ these days, which is not the one included in our Ubuntu version (it ships with 1.9+).&lt;/p&gt;

&lt;p&gt;Not to mess around to much, I have found &lt;a href=&quot;https://github.com/Microsoft/BashOnWindows/issues/216&quot;&gt;an Ubuntu PPA&lt;/a&gt; hosting all the packages I had needed. Installation went like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-add-repository ppa:brightbox/ruby-ng
sudo apt-get update

sudo apt-get install ruby2.3 ruby2.3-dev
sudo gem2.3 install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I took some googling, but it worked. &lt;a href=&quot;https://github.com/Microsoft/BashOnWindows&quot;&gt;Directory watching seems to be failing&lt;/a&gt;, which is a major bummer for anyone using web-dev tools, but it is a start. The built-in web-server was also operational.&lt;/p&gt;

&lt;p&gt;Another thing that worked, at least in basic example was a simple http node server. Node version also needed &lt;a href=&quot;https://www.brightbox.com/docs/ruby/ubuntu/&quot;&gt;a little upgrade&lt;/a&gt;, but it does seem to work.&lt;/p&gt;

&lt;p&gt;Other than that FS access seems to work as well, which is baffling to me. Sharing FS between host machines and virtualization ones is still a bit mysterious to me, so maybe it is the concept of it in general, rather than this specific case of it (and yes, I am aware that technically this Ubuntu on Windows contraption is neither virtualization or emulation, but on it sure feels like it).&lt;/p&gt;

&lt;h1 id=&quot;problems&quot;&gt;Problems?&lt;/h1&gt;
&lt;p&gt;I have noticed one. While trying to execute a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt; command on a git repository everything froze. So I was unable to open any new bash shells (interesting) or kill that process. Well &lt;a href=&quot;http://stackoverflow.com/questions/49988/really-killing-a-process-in-windows&quot;&gt;killing a process on Windows&lt;/a&gt; has always been something of a hit-and-miss experience for me anyway. In a world of imperfect developers producing imperfect code this might be a major issue.&lt;/p&gt;

&lt;p&gt;Another one was connected to cmder more than with “linux mode”. There is a &lt;a href=&quot;https://github.com/Microsoft/BashOnWindows/issues/1154&quot;&gt;known issue&lt;/a&gt; with the usage of arrow keys, while in bash. Running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%windir%\system32\bash.exe -cur_console:p1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should solve it.&lt;/p&gt;

&lt;h1 id=&quot;why-bother&quot;&gt;Why bother?&lt;/h1&gt;
&lt;p&gt;For me it was just about curiosity. Doing any development (in non-Microsoft technologies) has always been a major pain on Windows (despite what MS claims in almost every MS-sponsored talks I have ever heard). Having an option is much-appreciated.&lt;/p&gt;

&lt;h1 id=&quot;what-is-next&quot;&gt;What is next?&lt;/h1&gt;
&lt;p&gt;The upcoming Creators Update is supposed to improve the &lt;a href=&quot;https://thenewstack.io/windows-10-creators-update-means-windows-subsystem-linux/&quot;&gt;experience on many levels&lt;/a&gt;. More important than the specifics is the fact that this means that Microsoft does seem to keep at investing in this feature of their system. Some extra &lt;a href=&quot;https://channel9.msdn.com/events/Windows/Windows-Developer-Day-Creators-Update/Developer-tools-and-updates&quot;&gt;explanations about the upcoming update&lt;/a&gt; as presented by MS themselves, the interesting part starts around minute 18.&lt;/p&gt;

&lt;p&gt;It is also possible to report issues in &lt;a href=&quot;https://nodejs.org/en/download/package-manager/&quot;&gt;a civilized manner&lt;/a&gt; and looking at what is coming in the next release, somebody at MS does read those.&lt;/p&gt;

&lt;p&gt;So, for better or worse, jumping from pc gaming to development does look easier than it used to be.&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Apr 2017 00:00:00 +0200</pubDate>
        <link>http://countless-integers.github.io/2017/04/01/the-linux-terminal-experience-on-windows-10.html</link>
        <guid isPermaLink="true">http://countless-integers.github.io/2017/04/01/the-linux-terminal-experience-on-windows-10.html</guid>
        
        
      </item>
    
      <item>
        <title>Takeaways from &quot;Your code as a crime scene&quot; by Adam Tornhill</title>
        <description>&lt;p&gt;…more than a catchy title.&lt;/p&gt;

&lt;p&gt;There is a lot of good ideas in this book, so I decided to write some of them down just to commit them to memory. It is not a review, nor an attempt at creating an abstract. Therefore I will omit a lot of stuff and only concentrate on the things I found novel or unusual.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-vcs-logs&quot;&gt;Analyzing VCS logs&lt;/h2&gt;
&lt;p&gt;When I think of static code analysis, things like CLOC, PHPMD or compiler checks (in languages other than PHP, of course). I have not really been introduced to the concept of analyzing code base history up until I started reading this book. Git repository (or any other VCS) surely is a big pool of information, yet it never even crossed my mind to do so.&lt;/p&gt;

&lt;p&gt;The techniques described in this “Your code is a crime scene” are not “strict science”. They are heuristic methods that are designed to quickly point out &lt;strong&gt;possible&lt;/strong&gt; problems with code. In words of the author:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Complexity is only a problem if we need to deal with it. (…) Each improvement to a system is also a risk, as new problems and bugs may be introduced. We need strategies to identify and improve the parts that really matter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When presented with a task of refactoring the entire code base (or a refactor without a particular scope in mind) this might be a useful method to get started.&lt;/p&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;h3 id=&quot;code-maat&quot;&gt;Code Maat&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/adamtornhill/code-maat&quot;&gt;Code Maat&lt;/a&gt; is an open-source tool developed by the author for analyzing VCS logs. It’s command interface is not the most user-friendly, but there are plenty of usage examples in the book. In itself it does not handle results visualization – that has been left to 3rd party libraries (e.g. D3) or other tools by Tornhill.&lt;/p&gt;

&lt;p&gt;Moving on to analyzes that this tool can help us with…&lt;/p&gt;

&lt;h2 id=&quot;applications&quot;&gt;Applications&lt;/h2&gt;

&lt;h3 id=&quot;identifying-code-hot-spots&quot;&gt;Identifying code hot-spots&lt;/h3&gt;
&lt;p&gt;The concept of hot-spot tracking was taken from the crime-fighting world, were it is used to predict most likely locations where a criminal will strike. It is based on some simple assumptions (e.g., criminals operate within a fixed radius, so establishing where that are is and the commonalities between previous crime location can be key to catching them) and meticulous data gathering.&lt;/p&gt;

&lt;p&gt;Same principle can be apply to software – “code that changes is likely to change again”. Reason for those abnormally frequent changes being bugs and problems with the design. It is a bit far-fetched statement, because there can be a multitude of reasons for code to change often e.g. various designs are being tried out, code base is in the stage of a rapid growth, some automated tool modified the indentation or added doc block comments. Therefore author proposes supporting that with additional metrics like code complexity (measured with metrics like lines of code, cyclomatic complexity, average method length). However imprecise that might be it turns out that it can be a quick way to find places to take a closer look.&lt;/p&gt;

&lt;h3 id=&quot;detecting-logical-coupling&quot;&gt;Detecting logical coupling&lt;/h3&gt;
&lt;p&gt;Logical (temporal, change) coupling can be hard to spot. In the context of looking for potential refactoring candidates it is particularity annoying, since logical coupling is high up the list of things we do not want in our code. It can lead to unpredictable errors when we try to change something without being aware of the coupling and induce the work overhead when we do. Classes that loose cohesion are therefore a lot harder to maintain and reason about.&lt;/p&gt;

&lt;p&gt;Author proposes commit history analysis to identify files that often change in the same revision. Code Maat can perform such analysis feeding off pre-formatted VCS logs.&lt;/p&gt;

&lt;p&gt;Blindly applying this technique will result in a lot of false positives like: class files with unit tests tend to be committed together (at least in an ideal world), classes that are intentionally coupled (with explicit dependencies) are also often committed together etc.&lt;/p&gt;

&lt;h3 id=&quot;identifying-knowledge-concentration-and-improving-communication&quot;&gt;Identifying knowledge concentration and improving communication&lt;/h3&gt;
&lt;p&gt;Another interesting insight is that we can reduce the number of bugs and smooth out the overall development of a project by identifying main developers of temporally coupled code and making sure they communicate appropriately (frequently and efficiently). This is one of the practical takeaways from Conway’s law:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Organizations which design systems … are constrained to produce designs which are copies of the communication structures of these organizations
– &lt;cite&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_law&quot;&gt;M. Conway&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Special attention should be passed to code which main developers have left the project. Author rightfully remarks that programmers that leave the project take they their knowledge with them (as it is very difficult to pass along in full) and therefor make some parts of the code base more prone to failure.&lt;/p&gt;

&lt;h3 id=&quot;the-human-aspect&quot;&gt;The “human aspect”&lt;/h3&gt;
&lt;p&gt;A lot of emphasis in the last chapters of the book has been on psychological aspects of coding. It is another tie in to the title and leif motive of the book. In the end when trying to improve quality you cannot overlook the “human aspect” of things – things like group behaviour, individual motivation, communication and work styles.&lt;/p&gt;

&lt;p&gt;One of the interesting things mentioned in those chapters is a really good definition of design patterns:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Patterns have social value. As the architect Christopher Alexander formalized patterns, the intent was to enable collaborative construction using a shared vocabulary. As such, patterns are more of a cummunication tool that a technical solution.
taken from “Use beauty as a guiding principle” chapter&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;code-churn&quot;&gt;Code churn&lt;/h2&gt;
&lt;p&gt;Code churn is a metric of code change occurring in a project. It is considered to be a good predictor of problems in the code base as high value of change often leads to bugs or is a symptom of inefficient development process. What we want is a steady churn, where changes are maintainable and integrated often. You can actually make an argument for that by looking at the churn and the number of spotted defects (e.g. bug tickets, test errors, etc).&lt;/p&gt;

&lt;p&gt;Code churn is, as all heuristics, not infallible. There can be many reasons for a high churn rate e.g. adding a lot of static files, generated code (assuming that since it is generated it is less likely to fail, because it was already tested), different commit styles (everyone has that friend who just likes to drop a PR bomb at the end of a sprint).&lt;/p&gt;

&lt;p&gt;Relative code churn is a metric where a nominal number of changes is compared with the total number of lines in a changed file. Although using a relative value sounds less error prone, the research cited by the author states that there is little difference in that regard between the two.&lt;/p&gt;

&lt;p&gt;It is also worth noting that we can get similar metrics already from tools like Github. Every repository now has a “Graphs” page where we can ponder on things like “Commits” (number of commits per day), “Code frequency” (shows the ratio of lines added to lines deleted) and also gain some insight into contributions of individuals involved in the project (might help to spot things like: people committing in bulk).&lt;/p&gt;

&lt;p&gt;More about code churn:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms244661.aspx#churn_measures&quot;&gt;MSDN page&lt;/a&gt;. Search results for “code churn” seems to be dominated by content coming from Redmond.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.st.cs.uni-saarland.de/edu/recommendation-systems/papers/ICSE05Churn.pdf&quot;&gt;“Use of Relative Code Churn Measures to Predict System Defect Density” by Nachiappan Nagappan and Thomas Ball&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;/h2&gt;

&lt;h3 id=&quot;visual-code-analysis&quot;&gt;Visual code analysis&lt;/h3&gt;
&lt;p&gt;Silly concept from chapter 3. Get a rough idea of code complexity looking at the negative space (indentation and whitespace). The analysis is easy to perform in both automated and manual way (as is just through a glance at a code file).
There is even some theoretic work done on that &lt;a href=&quot;https://encrypted.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwiSi9mIoJHNAhWCOBoKHZAYBbcQFggcMAA&amp;amp;url=https%3A%2F%2Fplg.uwaterloo.ca%2F~migod%2Fpapers%2F2008%2Ficpc08-abram.pdf&amp;amp;usg=AFQjCNHxpNWIuLy2ey_Uy2O-3x_Nqa3oTw&amp;amp;sig2=EXjD8X_9hqSYJQgCZbFn2w&quot;&gt;subject&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;keep-a-decision-log&quot;&gt;Keep a decision log&lt;/h3&gt;
&lt;p&gt;Looking at code, even a comprehensively documented one, might not reveal the original intent of it is authors. This is especially true for long-running projects with many contributors. Memory and code comments might not be enough to capture the intent. And understanding the original intent can explain why or where things went wrong.&lt;/p&gt;

&lt;h3 id=&quot;analyzing-common-phrases-in-commit-messages&quot;&gt;Analyzing common phrases in commit messages&lt;/h3&gt;
&lt;p&gt;One of the little heuristics described in the book is analyzing keywords from commit messages. The assumptions here is that teams / projects riddled with problems will use a negative language full of ugly words like: “bug”, “fix”, “hotfix”, “bughotfix”, etc. Author used log files to export commit messages and build word maps using tools like &lt;a href=&quot;http://www.wordle.net&quot;&gt;Wordle&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;glossary-and-interesting-concepts&quot;&gt;Glossary and interesting concepts&lt;/h2&gt;

&lt;h3 id=&quot;process-loss&quot;&gt;Process loss&lt;/h3&gt;
&lt;p&gt;Process loss is a theory that teams and organizations cannot operate at 100% efficiency. In terms of development, one of the implications of it is that introducing additional developers to team makes it less efficient overall due to increased cost of communicate, organize and coordinate. Pretty much the opposite of synergy.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Adding manpower to a late software project makes it later
– &lt;cite&gt;Brooks’ law&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pluralistic-ignorance&quot;&gt;Pluralistic ignorance&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Pluralistic ignorance happens in situations where everyone privately rejects a norm but thinks that everyone else in the group supports it. Over time, pluralistic ignorance can lead to situations where a group follows rules that all of its members reject in private.
– &lt;cite&gt;“Norms, Groups, and False Serial Killers”&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I share this opinion as well. It is also one of the reasons I am not a big fan of “brain storming”. Turns out author shares that opinion as well:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The original purpose of brainstorming was to facilitate creative thinking. The premise is that a group can generate more ideas than its individuals can on their own. Unfortunately, research on the topic doesn’t support that claim.
– &lt;cite&gt;“Norms, Groups, and False Serial Killers”&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately there is no citation to be found, but this is what follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(…) in brainstorming we’re told not to criticize ideas. In reality, everyone knows they’re being evaluated anyway, and they behave accordingly. Further, the format of brainstorming allows only one person at a time to speak. That makes it hard to follow up on ideas, since we need to wait (…)
– &lt;cite&gt;“Norms, Groups, and False Serial Killers”&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another thing not mentioned there, but described in a different part of the chapter is the effect known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Fundamental_attribution_error&quot;&gt;attribution error&lt;/a&gt;. In terms of development this would mean that we are likely to have a higher opinion of code and ideas of developers who are senior or proved themselves capable in (singular) situations. It makes sense at first, but the errors lie in disregarding less-esteemed developer opinions or overrating that of those more “senior”. In other words, putting more trust in a person rather that his individual thoughts and actions. That can lead to a situation where some people are driving a whole project forward, whereas others are just in for a ride. I have often seen this in practice: teams with talented, but insecure and taciturn members, who had a lot of good ideas, but where not feeling comfortable expressing them. This is also one of reasons I believe in the role of a “team lead”, who should work on involving everyone.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The forensic / crime-fighting analogy doesn’t really hold up for long in this book, but it is been an interesting enough premise to get me into it. Aside from that, described techniques were new to me and even though I do not think I will be applying them on a daily basis, that insight will be helpful for analyzing projects in the future.&lt;/p&gt;

&lt;p&gt;“Your code as a crime scene” sometimes feels like a academic thesis, but it was actually quite a good read. It is also full of references and citations, which makes it easier to follow up on the described ideas.&lt;/p&gt;

&lt;p&gt;All in all, I was positively surprised by what I have read.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Jun 2016 00:00:00 +0200</pubDate>
        <link>http://countless-integers.github.io/vcs/static-code/analysis/git/2016/06/13/takeaways-from-your-code-as-a-crime-scene-by-adam-tornhill.html</link>
        <guid isPermaLink="true">http://countless-integers.github.io/vcs/static-code/analysis/git/2016/06/13/takeaways-from-your-code-as-a-crime-scene-by-adam-tornhill.html</guid>
        
        
        <category>vcs</category>
        
        <category>static-code</category>
        
        <category>analysis</category>
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>PHP Roundtable about DDD</title>
        <description>&lt;p&gt;Loose notes and bookmarks to fragments of PHP Roundtable panel on DDD with Mathias Verraes, Ross Tuck and Chris Fidao. Whole thing is about 2 hours long, so I decided to make some bookmarks in case I wanted to go back to it or reference it somebody. Unfortunatly I could not find the &lt;a href=&quot;https://github.com/PHPRoundtable/show-notes/tree/master/episodes&quot;&gt;shownotes or transcript for this episode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whole thing can be found under &lt;a href=&quot;https://www.phproundtable.com/episode/domain-driven-design-in-php&quot;&gt;this URL&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;essence-of-ddd-answered-by-m-verraes&quot;&gt;Essence of DDD, answered by M. Verraes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=4m00s&quot;&gt;4m00s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;how to explain domain to a MVC user:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=7m26s&quot;&gt;7m26s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;distinction between strategic (understanding the domain) and tactical DDD (implementation, e.g. events) [R. Tuck, M. Verraes]:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=10m8s&quot;&gt;10m8s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code that makes money should be the cleanest and the best possible quality.&lt;/p&gt;

&lt;p&gt;DDD is not a design pattern. It is a way of thinking about business and transferring that knowledge to code that models the business in a way understandable by a domain expert.&lt;/p&gt;

&lt;p&gt;Strengths and weaknesses of DDD [M. Verraes]:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=16m10s&quot;&gt;16m10s&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;aggregate&quot;&gt;Aggregate&lt;/h2&gt;
&lt;p&gt;Is an entity that has been designated to be streamline communication through for a group of VO or entities.&lt;/p&gt;

&lt;p&gt;Can be used to define a boundary for transactions.&lt;/p&gt;

&lt;p&gt;Aggregate is not strictly part of a domain, because business does not “know” about them. [M. Verraes].&lt;/p&gt;

&lt;p&gt;It is a tactical pattern. [R. Tuck].&lt;/p&gt;

&lt;h2 id=&quot;domain-events&quot;&gt;Domain events&lt;/h2&gt;
&lt;p&gt;Something that happens that the business would be interested in:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=46m59s&quot;&gt;46m59s&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;factories&quot;&gt;Factories&lt;/h2&gt;
&lt;p&gt;“Objects for pooping out new objects”:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=59m5s&quot;&gt;59m5s&lt;/a&gt;
It is just about the standard OOP factories.&lt;/p&gt;

&lt;h2 id=&quot;repositories&quot;&gt;Repositories&lt;/h2&gt;
&lt;p&gt;Objects for getting objects from persistence layer:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=1h2m0s&quot;&gt;1h2m0s&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;hexagonal-architecture&quot;&gt;Hexagonal architecture&lt;/h2&gt;
&lt;p&gt;Introduction, not too informative and a bit chaotic:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=1h3m30s&quot;&gt;1h3m30s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Difference between DDD and hexagonal architecture:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=1h7m50s&quot;&gt;1h7m50s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;a slightly more cohesive explanation:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=1h8m29s&quot;&gt;1h8m29s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Examples of hexagonal architecture and DDD going hand in hand:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=1h9m17s&quot;&gt;1h9m17s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;M. Verraes on the meaning of hexagons :) :
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=1h12m45s&quot;&gt;1h12m45s&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;post-panel-discussion&quot;&gt;Post panel discussion&lt;/h2&gt;
&lt;p&gt;2 words about Broadway Framework:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=1h16m38s&quot;&gt;1h16m38s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Web frameworks versus general design principles:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=1h20m34s&quot;&gt;1h20m34s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[M. Verraes] Common, simple problem for people transitioning from MVC- to DDD-thinking: structuring directory structure in a way that separates classes by function and not by domain.&lt;/p&gt;

&lt;p&gt;[R. Tuck] on splitting application into layers:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=1h36m40s&quot;&gt;1h36m40s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DDD and REST APIs
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=1h38m51s&quot;&gt;1h38m51s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Switching from CRUD thinking to DDD thinking:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=1h44m00s&quot;&gt;1h44m00s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Frequent issues with DDD:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=1h48m47s&quot;&gt;1h48m47s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to make first step towards building apps in a DDD way:
&lt;a href=&quot;https://youtu.be/CS_22l-LEtM?t=1h45m29s&quot;&gt;1h45m29s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have omitted a lot the fragments, some on purpose, some by mistake. I really wish they they would edit those things to some more managable and focused format. Still there is a lot interesting stuff in there, so enjoy.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Jun 2016 00:00:00 +0200</pubDate>
        <link>http://countless-integers.github.io/ddd/php/2016/06/13/php-roundtable-about-ddd.html</link>
        <guid isPermaLink="true">http://countless-integers.github.io/ddd/php/2016/06/13/php-roundtable-about-ddd.html</guid>
        
        
        <category>DDD</category>
        
        <category>php</category>
        
      </item>
    
      <item>
        <title>chsh to zsh</title>
        <description>&lt;p&gt;The time has come. I am currently in the process of revisiting every tool I use and looking for better alternatives. After living in denial for years I have come to a decision to switch from trusty Bash to ZSH.&lt;/p&gt;

&lt;h2 id=&quot;aint-nobody-got-time-for-that&quot;&gt;Ain’t nobody got time for that…&lt;/h2&gt;
&lt;p&gt;To make it easier for myself I went with what is called a ZSH framework. Namely &lt;code class=&quot;highlighter-rouge&quot;&gt;oh-my-zsh&lt;/code&gt;. It comes with a lot of stuff out of the box, like aliases, plugins, themes, sensible defaults. E.g. it enables highlighted arrow navigation in autocompletion lists. It was even polite enough to backup my existing &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc.pre-oh-my-zsh&lt;/code&gt; – nice touch.&lt;/p&gt;

&lt;h2 id=&quot;stuff-i-love&quot;&gt;Stuff I love&lt;/h2&gt;

&lt;h3 id=&quot;fuzzy-path-expansion&quot;&gt;Fuzzy path expansion&lt;/h3&gt;
&lt;p&gt;Let us say you have a path like &lt;code class=&quot;highlighter-rouge&quot;&gt;./src/Your/Super/Java/Like/Namepaced/Class.php&lt;/code&gt;. Using fuzzy path expansion you should able to get there with something like &lt;code class=&quot;highlighter-rouge&quot;&gt;cd s/y/j/clas&lt;/code&gt; (or any combination of unique path fragments). It is a lot less typing and after a while you get more and more efficient with typing. Which, as a die hard Vim fan, is good.&lt;/p&gt;

&lt;h3 id=&quot;autocomplete-fixes-wrong-caps&quot;&gt;Autocomplete “fixes” wrong caps&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls path/dir&amp;lt;tab&amp;gt;&lt;/code&gt; can expand it to the actual name like so &lt;code class=&quot;highlighter-rouge&quot;&gt;ls path/Dir&lt;/code&gt;. It also works with fuzzy path expansion mentioned earlier. Neat.&lt;/p&gt;

&lt;h3 id=&quot;autocomplete-almost-everywhere-and-if-not-then-there-is-probably-a-plugin-that-will-provide-that&quot;&gt;Autocomplete almost everywhere (and if not, then there is probably a plugin that will provide that)&lt;/h3&gt;
&lt;p&gt;You can try autocomplete in a lot more places with zsh. E.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;pgrep&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;kill&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;. It also helps with options completions, by displaying their description in the automcomplete choice list. No longer do I have to scratch the onliner I was writting just to &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt; my memory to come up with that &lt;code class=&quot;highlighter-rouge&quot;&gt;-oBsCuRe&lt;/code&gt; option for nmap.&lt;/p&gt;

&lt;h3 id=&quot;monits&quot;&gt;Monits&lt;/h3&gt;
&lt;p&gt;Standard commands like &lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; will actually ask you for confirmation by default. It is a smart default. Does not work all in all the cases, but I have not really bothered to notice the actual patern of it.&lt;/p&gt;

&lt;h2 id=&quot;plugins&quot;&gt;Plugins&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Oh-my-zsh&lt;/code&gt; by default, in full install, comes with a lot of them. Usually they are nothing more than shell scripts that get sourced when you open the shell (so do not load them all, duh). The ones I have found most useful are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;jira&lt;/strong&gt; – create / open issues from the command line, something that I found pretty useful. Where I work, we bury jira issue names in commits/branch names so this makes it easy for me to quickly look up the corresponding issue in jira. Lookup installation instructions, because it will need either an env variable or a local file with jira URL (it does not need any credentials, because it only opens up a correct link in the default browser).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;docker&lt;/strong&gt; – autocompletion for docker commands. E.g. it can autocomplete container names.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;composer&lt;/strong&gt; – autocompletion for composer commands.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;web-search&lt;/strong&gt; – so I can start searches from command line. I do not even know why.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;common-aliases&lt;/strong&gt; – because typing hurts…&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;z&lt;/strong&gt; – it is a bit unusual, because of the installation process. Apparently you need to source the script yourself (or put it on the path). What it does is to allow you quickly &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into most often visited directories (it keep tracks of that). &lt;code class=&quot;highlighter-rouge&quot;&gt;z &amp;lt;tab&amp;gt;&lt;/code&gt; will display a list of those – simple enough and can save a lot of time. Of course works with the usual zsh autocompletion magic, e.g. highlighted cursor navigation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;syntax highlighting&lt;/strong&gt; – real-time syntax highlight for shell commands. It will highlight wrongly typed commands in red, e.g. if you type &lt;code class=&quot;highlighter-rouge&quot;&gt;lss&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; it would mark it in red, same as an editor would. Check the installation instructions carefully.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;themes&quot;&gt;Themes&lt;/h3&gt;
&lt;p&gt;There is a lot of them to choose from and I have found a lot of decent ones (separate lines for commands and “status”, clock, VCS integration). I’ve chosen &lt;code class=&quot;highlighter-rouge&quot;&gt;avit&lt;/code&gt; for now and added a clock on the right side of the prompt, because I like to see when a command was executed.&lt;/p&gt;

&lt;h2 id=&quot;conclussion&quot;&gt;Conclussion&lt;/h2&gt;
&lt;p&gt;I am still exploring the functionality of zsh, but I can already tell that I do not want to go back to plain Bash. Fuzzy path autocompletion and autocompletion preview are killer features for me and I am already so used to them that running Bash afterwards felt frustrating. You can call it lazy, I will call it more productive, because it takes my mind of getting the silly stuff right all the time.&lt;/p&gt;

&lt;h2 id=&quot;useful-references-to-get-started&quot;&gt;Useful references to get started&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.joejag.com/2014/why-zsh.html] (and this)[https://coderwall.com/p/1y_j0q/zsh-oh-my-zsh-my-top-tips-for-daily-use&quot;&gt;General tips&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://reasoniamhere.com/2014/01/11/outrageously-useful-tips-to-master-your-z-shell/&quot;&gt;A bit deeper dive into glob(-ish) syntax and modifiers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Zsh&quot;&gt;The indispensable ArchLinux wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html&quot;&gt;Which helped me to find prompt expansion codes for adding a clock to my prompt (&lt;code class=&quot;highlighter-rouge&quot;&gt;%*&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zshwiki.org/&quot;&gt;Looks antiquated, but still, mostly, relevant&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;Oh-my-zsh github page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 11 Jun 2016 00:00:00 +0200</pubDate>
        <link>http://countless-integers.github.io/shell/zsh/2016/06/11/chsh-to-zsh.html</link>
        <guid isPermaLink="true">http://countless-integers.github.io/shell/zsh/2016/06/11/chsh-to-zsh.html</guid>
        
        
        <category>shell</category>
        
        <category>zsh</category>
        
      </item>
    
      <item>
        <title>Debugging outgoing requests with ncat</title>
        <description>&lt;p&gt;I had an interesting problem recently:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An application makes http requests on predfined events to a specified url and we need to verify what exactly is
being sent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many ways to deal with that, from dumping outgoing request objects to listening in on outgoing traffic with
Wireshark. But I have been a fan of &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap&lt;/code&gt; and its toolset, so I though that I would be a good opportunity to employ
&lt;code class=&quot;highlighter-rouge&quot;&gt;ncat&lt;/code&gt; – an &lt;code class=&quot;highlighter-rouge&quot;&gt;netcat&lt;/code&gt; reimplementation shipped with &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ncat&lt;/code&gt;, is as it precursor &lt;code class=&quot;highlighter-rouge&quot;&gt;nc&lt;/code&gt;, a “Swiss Army Knife” (see &lt;code class=&quot;highlighter-rouge&quot;&gt;man nc&lt;/code&gt;) of network tools. One of the many things it can do
is to listen for incoming traffic and print it to StdOut. So all I needed to do is to point the app to a url with &lt;code class=&quot;highlighter-rouge&quot;&gt;ncat&lt;/code&gt;
listening.&lt;/p&gt;

&lt;p&gt;The setup I have for development is a Vagrant box within a *nix compatible system (the shiny one).&lt;/p&gt;

&lt;p&gt;Setting up &lt;code class=&quot;highlighter-rouge&quot;&gt;ncat&lt;/code&gt; on the host system is straightforward enough:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ncat -lk 0.0.0.0 7777
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt; is for listen, &lt;code class=&quot;highlighter-rouge&quot;&gt;-k&lt;/code&gt; is for keep-alive, &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; points to localhost in a way that will make it possible to connect
to it from the outside world, &lt;code class=&quot;highlighter-rouge&quot;&gt;7777&lt;/code&gt; is the host post number.&lt;/p&gt;

&lt;p&gt;To access that from the VM, we need an address. I have Vagrant set up a private network, so my host machine acts as a
gateway for the guest system. So I need the gateway address:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netstat -rn 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and look for a gateway that is not pointing to localhost :). In my case it is &lt;code class=&quot;highlighter-rouge&quot;&gt;10.0.2.2&lt;/code&gt;, might be a standard for
Vagrant boxes, but I am not sure. Now I know I need to ping &lt;code class=&quot;highlighter-rouge&quot;&gt;10.0.2.2:7777&lt;/code&gt; from my guest system to reach my &lt;code class=&quot;highlighter-rouge&quot;&gt;ncat&lt;/code&gt; listener on the host
system:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -X POST 10.0.2.2:7777 --data '{&quot;hello&quot;: &quot;world&quot;}'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ncat&lt;/code&gt; ouput on the host machine:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ncat -lk 0.0.0.0 7777
POST / HTTP/1.1
User-Agent: curl/7.38.0
Host: 10.0.2.2:7777
Accept: */*
Content-Length: 18
Content-Type: application/x-www-form-urlencoded

{&quot;hello&quot;: &quot;world&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This way I know it works.&lt;/p&gt;

&lt;p&gt;All that was left was to put that &lt;code class=&quot;highlighter-rouge&quot;&gt;ncat&lt;/code&gt; listener address in place of the target url in the app and done!&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://countless-integers.github.io/debugging/ncat/2016/01/18/debugging-outgoing-requests-with-ncat.html</link>
        <guid isPermaLink="true">http://countless-integers.github.io/debugging/ncat/2016/01/18/debugging-outgoing-requests-with-ncat.html</guid>
        
        
        <category>debugging</category>
        
        <category>ncat</category>
        
      </item>
    
      <item>
        <title>Make cmus play nice with clementine</title>
        <description>&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;I’ve written a tiny script to allow me to bind media keys to the currently used audio player.&lt;/p&gt;

&lt;h2 id=&quot;backstory&quot;&gt;Backstory&lt;/h2&gt;
&lt;div class=&quot;collapsable&quot;&gt;
&lt;p&gt;
Some people collect stamps, others cook exquisite dishes and other like to get drunk and cause trouble in public
transportation. I like to fiddle with my Arch Linux machine at home. It's good to have a hobby, right?
&lt;/p&gt;
&lt;p&gt;
My setup likes to quit on me after package updates. Being a rolling release, Arch does that every now and then. Lately
my KDE apps stopped rendering correctly. It made interacting with most of them impossible. Clementine in particular
caused me much grief, since you can't do much with it without its GUI controls. A major annoyance, one in a long line,
but I'm not really complaining because apps dying make you learn something new. Finding a cli media player being
a case in point here.
&lt;/p&gt;
&lt;p&gt;
I have looked at cli players before, but usually dropped them because I couldn't make them work with global media
control keys -- an important feature for me. This time round I decided to make it work whatever it takes.
&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-player&quot;&gt;The player&lt;/h3&gt;
&lt;p&gt;I chose &lt;a href=&quot;https://github.com/cmus/cmus&quot;&gt;cmus&lt;/a&gt; as my clementine alternative. I used it before and I liked the interface.
Some of the keybinding resemble those of vim (well home row &lt;kbd&gt;hjkl&lt;/kbd&gt; at least). It’s pretty quick to setup and
use. Library scanning is also quite speedy. Advantages all around. There’s plenty of good posts and documentation for
cmus, so I won’t delve into it’s use and virtues here. I’ll post some links below though&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-bind&quot;&gt;The bind&lt;/h2&gt;
&lt;p&gt;So cmus worked great, but it doesn’t respond to media keys. It does have an utility to allow for external control of
it’s functions aptly named &lt;code class=&quot;highlighter-rouge&quot;&gt;cmus-remote&lt;/code&gt;. With it you can toggle play/pause, switch to next track and so on. I don’t
care much for volume control, because I prefer to leave that to the system. So all I have to do is to hook up
&lt;code class=&quot;highlighter-rouge&quot;&gt;cmus-remote&lt;/code&gt; to global keybinding.&lt;/p&gt;

&lt;p&gt;There are many ways to achieve that, but I used the simple, GUI way. KDE has a setting panel for configuring keybindings
and it looks like this:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/img/cmus.art.2.png&quot; alt=&quot;setting keybinding on the media-play key&quot; /&gt;
  &lt;figcaption&gt;setting keybinding on the media-play key&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/img/cmus.art.3.png&quot; alt=&quot;setting custom binding to cmus-remote&quot; /&gt;
  &lt;figcaption&gt;setting custom binding to cmus-remote&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There is a little hiccup after setting those keybindings – now other players (e.g., clementine) aren’t able to use those media key bindings.&lt;/p&gt;

&lt;p&gt;Bash scripting to the rescue:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;pgrep &lt;span class=&quot;s2&quot;&gt;&quot;clementine$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /Applications/clementine.app/Contents/MacOS/clementine &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        /Applications/clementine.app/Contents/MacOS/clementine &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;clementine &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; 2&amp;gt;/dev/null
&lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;pgrep &lt;span class=&quot;s2&quot;&gt;&quot;cmus$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;cmus-remote &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; 2&amp;gt;/dev/null
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now I made that executable and put it in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/bin/mediaToggle.sh&lt;/code&gt; (which btw. is already in my &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt; lookup).&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  &lt;img src=&quot;/img/cmus.art.1.png&quot; alt=&quot;setting custom binding to newly written script&quot; /&gt;
  &lt;figcaption&gt;setting custom binding to newly written script&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now, when clementine would be running &lt;kbd&gt;play&lt;/kbd&gt; would interact with it. But when it wouldn’t run it’ll try to
toggle play on cmus instance (it’d have to be running, though). Great.&lt;/p&gt;

&lt;h2 id=&quot;last-words&quot;&gt;Last words&lt;/h2&gt;
&lt;div class=&quot;collapsable&quot;&gt;
&lt;p&gt;
So here I am: I wanted to play some music to relax after work, but ended up switching media player, writing some
hack-script to make it work the way I wanted it to and in the end writing all that up in this blog post. All because of
some unexpected glitch in qt app (?) rendering.
&lt;/p&gt;
&lt;p&gt;
I won't be replacing clementine with cmus (because portability, companion app with remote and media import and general
awesomeness), but it's nice to have a reliable alternative like that.
&lt;/p&gt;
&lt;/div&gt;

&lt;script&gt;
(function () {
    var collapsables = document.querySelectorAll('.collapsable');
    if (!collapsables.length || !document.body.addEventListener || !document.body.classList) return;
    Array.prototype.forEach.call(collapsables, function (el) {
        var trigger = el.previousElementSibling;
        trigger.classList.add('collapsableTrigger');
        trigger.addEventListener('click', function (event) {
            trigger.classList.toggle('collapsableTrigger');
        }, false);
    });
})();
&lt;/script&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;some reference material for cmus: &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 20 Sep 2015 00:00:00 +0200</pubDate>
        <link>http://countless-integers.github.io/linux/2015/09/20/make-cmus-play-nice-with-clementine.html</link>
        <guid isPermaLink="true">http://countless-integers.github.io/linux/2015/09/20/make-cmus-play-nice-with-clementine.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
  </channel>
</rss>
