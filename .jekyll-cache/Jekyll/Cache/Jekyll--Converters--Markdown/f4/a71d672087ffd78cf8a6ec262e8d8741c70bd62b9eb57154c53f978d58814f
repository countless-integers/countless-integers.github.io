I"ú<h2 id="tldr">TL;DR</h2>
<p>Iâ€™ve written a tiny script to allow me to bind media keys to the currently used audio player.</p>

<h2 id="backstory">Backstory</h2>
<div class="collapsable">
<p>
Some people collect stamps, others cook exquisite dishes and other like to get drunk and cause trouble in public
transportation. I like to fiddle with my Arch Linux machine at home. It's good to have a hobby, right?
</p>
<p>
My setup likes to quit on me after package updates. Being a rolling release, Arch does that every now and then. Lately
my KDE apps stopped rendering correctly. It made interacting with most of them impossible. Clementine in particular
caused me much grief, since you can't do much with it without its GUI controls. A major annoyance, one in a long line,
but I'm not really complaining because apps dying make you learn something new. Finding a cli media player being
a case in point here.
</p>
<p>
I have looked at cli players before, but usually dropped them because I couldn't make them work with global media
control keys -- an important feature for me. This time round I decided to make it work whatever it takes.
</p>
</div>

<h3 id="the-player">The player</h3>
<p>I chose <a href="https://github.com/cmus/cmus">cmus</a> as my clementine alternative. I used it before and I liked the interface.
Some of the keybinding resemble those of vim (well home row <kbd>hjkl</kbd> at least). Itâ€™s pretty quick to setup and
use. Library scanning is also quite speedy. Advantages all around. Thereâ€™s plenty of good posts and documentation for
cmus, so I wonâ€™t delve into itâ€™s use and virtues here. Iâ€™ll post some links below though<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<h2 id="the-bind">The bind</h2>
<p>So cmus worked great, but it doesnâ€™t respond to media keys. It does have an utility to allow for external control of
itâ€™s functions aptly named <code class="highlighter-rouge">cmus-remote</code>. With it you can toggle play/pause, switch to next track and so on. I donâ€™t
care much for volume control, because I prefer to leave that to the system. So all I have to do is to hook up
<code class="highlighter-rouge">cmus-remote</code> to global keybinding.</p>

<p>There are many ways to achieve that, but I used the simple, GUI way. KDE has a setting panel for configuring keybindings
and it looks like this:</p>

<figure class="image">
  <img src="/img/cmus.art.2.png" alt="setting keybinding on the media-play key" />
  <figcaption>setting keybinding on the media-play key</figcaption>
</figure>

<figure class="image">
  <img src="/img/cmus.art.3.png" alt="setting custom binding to cmus-remote" />
  <figcaption>setting custom binding to cmus-remote</figcaption>
</figure>

<p>There is a little hiccup after setting those keybindings â€“ now other players (e.g., clementine) arenâ€™t able to use those media key bindings.</p>

<p>Bash scripting to the rescue:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">if </span>pgrep <span class="s2">"clementine$"</span><span class="p">;</span> <span class="k">then
    if</span> <span class="o">[</span> <span class="nt">-f</span> /Applications/clementine.app/Contents/MacOS/clementine <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        /Applications/clementine.app/Contents/MacOS/clementine <span class="nt">-t</span>
    <span class="k">fi
    </span>clementine <span class="nt">-t</span> 2&gt;/dev/null
<span class="k">elif </span>pgrep <span class="s2">"cmus$"</span><span class="p">;</span> <span class="k">then
    </span>cmus-remote <span class="nt">-u</span> 2&gt;/dev/null
<span class="k">fi</span>
</code></pre></div></div>

<p>Now I made that executable and put it in <code class="highlighter-rouge">~/bin/mediaToggle.sh</code> (which btw. is already in my <code class="highlighter-rouge">$PATH</code> lookup).</p>

<figure class="image">
  <img src="/img/cmus.art.1.png" alt="setting custom binding to newly written script" />
  <figcaption>setting custom binding to newly written script</figcaption>
</figure>

<p>Now, when clementine would be running <kbd>play</kbd> would interact with it. But when it wouldnâ€™t run itâ€™ll try to
toggle play on cmus instance (itâ€™d have to be running, though). Great.</p>

<h2 id="last-words">Last words</h2>
<div class="collapsable">
<p>
So here I am: I wanted to play some music to relax after work, but ended up switching media player, writing some
hack-script to make it work the way I wanted it to and in the end writing all that up in this blog post. All because of
some unexpected glitch in qt app (?) rendering.
</p>
<p>
I won't be replacing clementine with cmus (because portability, companion app with remote and media import and general
awesomeness), but it's nice to have a reliable alternative like that.
</p>
</div>

<script>
(function () {
    var collapsables = document.querySelectorAll('.collapsable');
    if (!collapsables.length || !document.body.addEventListener || !document.body.classList) return;
    Array.prototype.forEach.call(collapsables, function (el) {
        var trigger = el.previousElementSibling;
        trigger.classList.add('collapsableTrigger');
        trigger.addEventListener('click', function (event) {
            trigger.classList.toggle('collapsableTrigger');
        }, false);
    });
})();
</script>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>some reference material for cmus:Â <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET