I"9<p>While trying to mock an object using mockery I came across this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fatal error: Undefined class constant 'self::LIMIT' in /project.path/vendor/mockery/mockery/library/Mockery/Generator/Parameter.php on line 62
</code></pre></div></div>

<p>So I tried to make the mock with vanilla PHPUnit:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fatal error: Undefined class constant 'self::LIMIT' in /project.path/vendor/phpunit/phpunit-mock-objects/src/Framework/MockObject/Generator.php on line 1064
</code></pre></div></div>

<p>My first guess was that it had a problem with me using constants as default parameter values in method definitions like so:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php">  <span class="k">public</span> <span class="k">function</span> <span class="nf">method</span><span class="p">(</span><span class="nv">$param</span> <span class="o">=</span> <span class="nx">self</span><span class="o">::</span><span class="na">VALUE</span><span class="p">)</span></code></pre></figure>

<p>However this sounded wrong – I used that before and never had a problem with it. So I dug deeper. Then I came across an interface that the mocked class implemented. It looked something like this:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php">    <span class="kd">interface</span> <span class="nc">ITotallyForgotIMadeAnInterfaceForThis</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">method</span><span class="p">(</span><span class="nv">$param</span> <span class="o">=</span> <span class="nx">self</span><span class="o">::</span><span class="na">VALUE</span><span class="p">);</span>
    <span class="p">}</span></code></pre></figure>

<p>I had to look twice, but there it was, my undefined constant. How this had worked (because it did) during normal application run? It shouldn’t, but somehow it did? Anyone can elaborate?</p>
:ET